// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "UnityCG.cginc"

CBUFFER_START(Params)
    int historyLength = 3;
CBUFFER_END

struct Node {

    float3 position;
    float3 velocity;
    float3 targetPosition;
    float mass;
    float maxSpeed;
    float maxTurnSpeed;
    float numberOfNodes;
    float obsCount;

};


RWStructuredBuffer<Node> boidBuffer;


float3 ClampMagnitude(float3 vec, float limit)
{
    float3 result = vec;

    if(length(result) > limit)
    {
        result = normalize(result) * limit;
    }

    return result;
}

float3 Seek(Node node, float3 target)
{
    float3 desiredVelocity = target - node.position;
    desiredVelocity = normalize(desiredVelocity) * node.maxSpeed;

    float3 turningForce = node.velocity - desiredVelocity;
    turningForce = ClampMagnitude(turningForce, node.maxTurnSpeed);

    return turningForce;
}


[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    Node node = boidBuffer[id.x];

    float3 accel = Seek(node, node.targetPosition);

    node.velocity -= ClampMagnitude(accel / node.mass, node.maxSpeed);
    node.velocity = ClampMagnitude(node.velocity, node.maxSpeed);

    node.position += node.velocity;

    boidBuffer[id.x] = node;

}
